cmake_minimum_required(VERSION 3.15)
project(BachelorProjectNoGUI)
INCLUDE(FindPkgConfig)
include_directories(${GLFW_INCLUDE_DIRS})
set(CMAKE_BUILD_TYPE RELEASE)
set(CMAKE_CXX_STANDARD 20)
# add_compile_options(-Wall -O3 -march=native)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-march=native" COMPILER_SUPPORTS_MARCH_NATIVE)
if(COMPILER_SUPPORTS_MARCH_NATIVE)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native")
endif()
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BachelorProjectNoGUI_SOURCE_DIR})

include_directories(${Eigen})

add_executable(BachelorProjectNoGUI

        project/mlp/mlp.h
        project/mlp/mlp.cpp
        project/main.cpp
        project/uiFunctions/uiFunctions.h
        project/uiFunctions/uiFunctions.cpp
        project/simState/simState.cpp
        project/simState/simState.h project/simBuilder/simBuilder.cpp project/simBuilder/simBuilder.h project/utilities/utilities.h project/uiStateTracker/uiStateTracker.h project/agent/agent.cpp project/agent/agent.h
        project/simState/actions.h
        project/createRngObj/createRngObj.h
        project/createRngObj/createRngObj.cpp
        project/randObj/randobj.h
        project/randObj/randobj.cpp
        project/agent/qLearning/qLearning.cpp
        project/agent/qLearning/qLearning.h
        project/agent/qerLearning/qerLearning.cpp
        project/agent/qerLearning/qerLearning.h
        project/agent/qerqueueLearning/qerQueueLearning.cpp
        project/agent/qerqueueLearning/qerQueueLearning.h
        project/agent/dqerQueueLearning/dqerQueueLearning.cpp
        project/agent/dqerQueueLearning/dqerQueueLearning.h
        project/kolsmir/kolsmir.h
        project/pettitt/pettitt.h
        project/kolsmir/kolsmir.cpp
        project/pettitt/pettitt.cpp
        project/hyperparamSpec/hyperparamSpec.cpp
        project/hyperparamSpec/hyperparamSpec.h
        project/simContainer/simContainer.cpp project/simContainer/simContainer.h project/runHeadless.cpp project/runHeadless.h project/agent/sarsa/sarsa.cpp project/agent/sarsa/sarsa.h project/agent/experience.h project/monteCarloSim/monteCarloSim.cpp project/monteCarloSim/monteCarloSim.h project/opTrack/opTrack.cpp project/opTrack/opTrack.h)

#find_package(OpenMP)
#if (OpenMP_CXX_FOUND)
#    target_link_libraries(BachelorProjectNoGUI OpenMP::OpenMP_CXX)
#endif ()

message(${CMAKE_CXX_FLAGS_RELEASE})